service: zeong-immigration-infrastruct

useDotenv: true

plugins:
  - serverless-plugin-typescript
custom:
  #stage
  stage: dev
provider:
  name: aws
  #Node.js runtime
  runtime: nodejs16.x
  #Region of deployment
  region: us-east-2
  #Env variables
  environment:
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_USER_CLIENT_ID: ${env:COGNITO_USER_CLIENT_ID}
    ZEONG_TABLE: ${env:ZEONG_TABLE}
  CognitoAddCustomAttributes:
    CognitoUserPoolIdOutputKey: ${env:COGNITO_USER_POOL_ID} # The key of the outputted UserPool Ref
    CognitoUserPoolClientIdOutputKey: ${env:COGNITO_USER_CLIENT_ID} # The key of the outputted UserPoolClient Ref
    CustomAttributes:
      - AttributeDataType: String
        DeveloperOnlyAttribute: False
        Mutable: True
        Name: "role" # this will end up being custom:another
        Required: False
  #IAM roles
  iamRoleStatements:
    #Role for Cognito
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:ListUsers
      Resource:
        - "Fn::GetAtt": [UserPool, Arn]
    #Role for DynamoDB
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ZeongTable, Arn]

functions:
  app:
    handler: ./src/index.handler
    environment:
      REGION: ${env:REGION}
      COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
      COGNITO_USER_CLIENT_ID: ${env:COGNITO_USER_CLIENT_ID}
      AUTH_FLOW: ${env:AUTH_FLOW}
    events:
      - http:
          path: ANY /
          method: get
      - http:
          path: ANY /
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
              - custom:role
      - http: "ANY {proxy+}"

  cognitoCustomMessageLambda:
    handler: ./src/EDA/post-registration.handler
    events:
      - cognitoUserPool:
          pool: zeong-user-pool
          trigger: PostConfirmation
          existing: true

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: zeong-user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: "role"
            Required: False
            Mutable: true
            AttributeDataType: String
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName:
        GenerateSecret: false
        UserPoolId: {Ref: UserPool}
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    ZeongTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:ZEONG_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
