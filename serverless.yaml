service: zeong-immigration-infrastruct

useDotenv: true

plugins:
  - serverless-plugin-typescript
custom:
  #stage
  stage: dev
provider:
  name: aws
  #Node.js runtime
  runtime: nodejs16.x
  #Region of deployment
  region: us-east-2
  #Env variables
  environment:
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_USER_CLIENT_ID: ${env:COGNITO_USER_CLIENT_ID}
    ZEONG_TABLE: ${env:ZEONG_TABLE}
  #Custom Attributes for cognito pool
  CognitoAddCustomAttributes:
    CognitoUserPoolIdOutputKey: ${env:COGNITO_USER_POOL_ID} # The key of the outputted UserPool Ref
    CognitoUserPoolClientIdOutputKey: ${env:COGNITO_USER_CLIENT_ID} # The key of the outputted UserPoolClient Ref
    CustomAttributes:
      - AttributeDataType: String
        DeveloperOnlyAttribute: False
        Mutable: True
        Name: 'role' # this will end up being custom:another
        Required: False
  #IAM roles
  iamRoleStatements:
    #Role for Cognito
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:ListUsers
      Resource:
        - 'Fn::GetAtt': [UserPool, Arn]
    #Role for DynamoDB
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'Fn::GetAtt': [ZeongTable, Arn]
    #Role for Elastic Search Cluster
    - Effect: Allow
      Action:
        - es:ESHttpPost
        - es:ESHttpPut
        - es:ESHttpDelete
        - es:ESHttpGet
      Resource:
        - {'Fn::GetAtt': ['ElasticSearchInstance', 'DomainArn']}
        - {
            'Fn::Join':
              [
                '',
                [
                  'Fn::GetAtt': ['ElasticSearchInstance', 'DomainArn'],
                  '/*',
                ],
              ],
          }
      # Condition:
      #   IpAddress:
      #     aws:SourceIp:
      #       - '0.0.0.0' # Whitelisted IP

# Lambda Functions
functions:
  app:
    handler: ./src/index.handler
    environment:
      REGION: ${env:REGION}
      COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
      COGNITO_USER_CLIENT_ID: ${env:COGNITO_USER_CLIENT_ID}
      ACCESS_KEY: ${env:ACCESS_KEY}
      ACCESS_SECRET: ${env:ACCESS_SECRET}
      AUTH_FLOW: ${env:AUTH_FLOW}
      ES_HOST: ${env:ES_HOST}
      elasticURL:
        Fn::GetAtt: [ElasticSearchInstance, DomainEndpoint]
    events:
      - http:
          path: ANY /
          method: get
      - http:
          path: ANY /
          method: post
          cors: true
          # authorizer:
          #   name: PrivateAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn:
          #     Fn::GetAtt:
          #       - UserPool
          #       - Arn
          #   claims:
          #     - email
          #     - custom:role
      - http: 'ANY {proxy+}'

  cognitoCustomMessageLambda:
    handler: ./src/EDA/post-registration.handler
    events:
      - cognitoUserPool:
          pool: zeong-user-pool
          trigger: PostConfirmation
          existing: true
# Other Resources
resources:
  Resources:
    # LambdaElasticSearchAccessRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service: lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     ManagedPolicyArns:
    #       - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
    #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    #       - arn:aws:iam::aws:policy/AmazonESFullAccess
    #cognito user pool
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: zeong-user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: 'role'
            Required: False
            Mutable: true
            AttributeDataType: String
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ['email']
    # Cognito User Client
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName:
        GenerateSecret: false
        UserPoolId: {Ref: UserPool}
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - 'ADMIN_NO_SRP_AUTH'
    #Dynamodb Table
    ZeongTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:ZEONG_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
    #ElasticSeach Instance
    # ElasticSearchInstance:
    #   Type: AWS::Elasticsearch::Domain
    #   Properties:
    #     EBSOptions:
    #       EBSEnabled: true
    #       VolumeType: gp2
    #       VolumeSize: 10
    #     ElasticsearchClusterConfig:
    #       InstanceType: t3.small.elasticsearch
    #       InstanceCount: 1
    #       DedicatedMasterEnabled: false
    #       ZoneAwarenessEnabled: false
    #     ElasticsearchVersion: 6.7
    #     AccessPolicies:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: 'Allow'
    #           Principal:
    #             AWS: '*'
    #           Action: 'es:*'
    #           Resource: '*'
    #           Condition:
    #             IpAddress:
    #               aws:SourceIp: ['2.50.46.161', '102.176.94.98']
    ElasticSearchInstance:
      Type: AWS::Elasticsearch::Domain
      Properties:
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp2
          VolumeSize: 10
        ElasticsearchClusterConfig:
          InstanceType: t3.small.elasticsearch
          InstanceCount: 1
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false
        ElasticsearchVersion: 6.7
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: ['es:ESHttp*']
              Principal:
                AWS: !Sub 'arn:aws:iam::315702110963:role/zeong-immigration-infrastruct-dev-us-east-2-lambdaRole'
              Resource: !Sub 'arn:aws:es:us-east-2:315702110963:domain/zeong-i-elasti-128waval2djnk'
        AdvancedOptions:
          rest.action.multi.allow_explicit_index: 'true'
